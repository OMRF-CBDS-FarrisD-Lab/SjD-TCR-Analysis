#!/bin/bash
module load slurm
module load oracle_jdk
module load R
module load bioconductor

#Demultiplexed output fastq files of individual cases and controls generated by this routine are uploaded to SRA (PRJNA1152703).
#Following steps are for illustrative purposes. Go to Step_2 for directions on processing de-multiplexed files.   


#If working from a compute cluster, install the necessary workload manager and load the required environments to run the JAR executable file as shown above
#If working from a local system, get the latest JRE (For more information on installation and running, refer to MIGEC resources: https://migec.readthedocs.io/en/latest/install.html).    

#Store command to run the .jar executable file in a variable called MIGEC, change the memory allocation by changing Xmx___G
MIGEC="java -Xmx256G -jar migec-1.2.9.jar"

#We use sbatch command to submit the job to slurm workload manager for all steps in the MIGEC pipeline. Command for the 'checkout' routine is wrapped within double quotes here. All migec routines have been wrapped and executed this way.

#Run the checkout routine (wrapped here within quotes) with parameters -c, -u, -t, and -e.  
#For batch processing, prepare a barcode file containing appropriate barcodes and corresponding individual/pooled fastq sequence filenames (.gz) as per the format laid out in MIGEC resources (barcodes.txt). Output folder: 'checkout'
#FASTQ filenames in barcodes.txt should be the absolute filepath (e.g. users/username/parent_directory/MIGEC/Input/barcodes.txt) or relative to the directory containing barcodes.txt  
sbatch --partition=highmem --cpus-per-task=50 --mem=400G --wrap="$MIGEC CheckoutBatch -cute Input/barcodes.txt checkout/"

#Demultiplexed output fastq files of individual cases and controls generated by this routine are uploaded to SRA (PRJNA1152703)